// Code generated by protoc-gen-go. DO NOT EDIT.
// source: issuer.proto

package spire_api_issuer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	svid "github.com/spiffe/spire/proto/spire/type/svid"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	_type "spire/type"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// X509SVIDParams are the parameters the issuer needs to mint an X509-SVID
type X509SVIDParams struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *X509SVIDParams) Reset()         { *m = X509SVIDParams{} }
func (m *X509SVIDParams) String() string { return proto.CompactTextString(m) }
func (*X509SVIDParams) ProtoMessage()    {}
func (*X509SVIDParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8d83c9b614651f, []int{0}
}

func (m *X509SVIDParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_X509SVIDParams.Unmarshal(m, b)
}
func (m *X509SVIDParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_X509SVIDParams.Marshal(b, m, deterministic)
}
func (m *X509SVIDParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_X509SVIDParams.Merge(m, src)
}
func (m *X509SVIDParams) XXX_Size() int {
	return xxx_messageInfo_X509SVIDParams.Size(m)
}
func (m *X509SVIDParams) XXX_DiscardUnknown() {
	xxx_messageInfo_X509SVIDParams.DiscardUnknown(m)
}

var xxx_messageInfo_X509SVIDParams proto.InternalMessageInfo

func (m *X509SVIDParams) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

// JWTSVIDParams are the parameters the issuer needs to mint a JWT-SVID
type JWTSVIDParams struct {
	Audience             []string `protobuf:"bytes,1,rep,name=audience,proto3" json:"audience,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWTSVIDParams) Reset()         { *m = JWTSVIDParams{} }
func (m *JWTSVIDParams) String() string { return proto.CompactTextString(m) }
func (*JWTSVIDParams) ProtoMessage()    {}
func (*JWTSVIDParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8d83c9b614651f, []int{1}
}

func (m *JWTSVIDParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTSVIDParams.Unmarshal(m, b)
}
func (m *JWTSVIDParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTSVIDParams.Marshal(b, m, deterministic)
}
func (m *JWTSVIDParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTSVIDParams.Merge(m, src)
}
func (m *JWTSVIDParams) XXX_Size() int {
	return xxx_messageInfo_JWTSVIDParams.Size(m)
}
func (m *JWTSVIDParams) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTSVIDParams.DiscardUnknown(m)
}

var xxx_messageInfo_JWTSVIDParams proto.InternalMessageInfo

func (m *JWTSVIDParams) GetAudience() []string {
	if m != nil {
		return m.Audience
	}
	return nil
}

type AttestForX509SVIDRequest struct {
	// Types that are valid to be assigned to Step:
	//	*AttestForX509SVIDRequest_Params_
	//	*AttestForX509SVIDRequest_ChallengeResponse
	Step                 isAttestForX509SVIDRequest_Step `protobuf_oneof:"step"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *AttestForX509SVIDRequest) Reset()         { *m = AttestForX509SVIDRequest{} }
func (m *AttestForX509SVIDRequest) String() string { return proto.CompactTextString(m) }
func (*AttestForX509SVIDRequest) ProtoMessage()    {}
func (*AttestForX509SVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8d83c9b614651f, []int{2}
}

func (m *AttestForX509SVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestForX509SVIDRequest.Unmarshal(m, b)
}
func (m *AttestForX509SVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestForX509SVIDRequest.Marshal(b, m, deterministic)
}
func (m *AttestForX509SVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestForX509SVIDRequest.Merge(m, src)
}
func (m *AttestForX509SVIDRequest) XXX_Size() int {
	return xxx_messageInfo_AttestForX509SVIDRequest.Size(m)
}
func (m *AttestForX509SVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestForX509SVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttestForX509SVIDRequest proto.InternalMessageInfo

type isAttestForX509SVIDRequest_Step interface {
	isAttestForX509SVIDRequest_Step()
}

type AttestForX509SVIDRequest_Params_ struct {
	Params *AttestForX509SVIDRequest_Params `protobuf:"bytes,1,opt,name=params,proto3,oneof"`
}

type AttestForX509SVIDRequest_ChallengeResponse struct {
	ChallengeResponse []byte `protobuf:"bytes,2,opt,name=challenge_response,json=challengeResponse,proto3,oneof"`
}

func (*AttestForX509SVIDRequest_Params_) isAttestForX509SVIDRequest_Step() {}

func (*AttestForX509SVIDRequest_ChallengeResponse) isAttestForX509SVIDRequest_Step() {}

func (m *AttestForX509SVIDRequest) GetStep() isAttestForX509SVIDRequest_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (m *AttestForX509SVIDRequest) GetParams() *AttestForX509SVIDRequest_Params {
	if x, ok := m.GetStep().(*AttestForX509SVIDRequest_Params_); ok {
		return x.Params
	}
	return nil
}

func (m *AttestForX509SVIDRequest) GetChallengeResponse() []byte {
	if x, ok := m.GetStep().(*AttestForX509SVIDRequest_ChallengeResponse); ok {
		return x.ChallengeResponse
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AttestForX509SVIDRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AttestForX509SVIDRequest_Params_)(nil),
		(*AttestForX509SVIDRequest_ChallengeResponse)(nil),
	}
}

type AttestForX509SVIDRequest_Params struct {
	Data                 *_type.AttestationData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Params               *X509SVIDParams        `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AttestForX509SVIDRequest_Params) Reset()         { *m = AttestForX509SVIDRequest_Params{} }
func (m *AttestForX509SVIDRequest_Params) String() string { return proto.CompactTextString(m) }
func (*AttestForX509SVIDRequest_Params) ProtoMessage()    {}
func (*AttestForX509SVIDRequest_Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8d83c9b614651f, []int{2, 0}
}

func (m *AttestForX509SVIDRequest_Params) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestForX509SVIDRequest_Params.Unmarshal(m, b)
}
func (m *AttestForX509SVIDRequest_Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestForX509SVIDRequest_Params.Marshal(b, m, deterministic)
}
func (m *AttestForX509SVIDRequest_Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestForX509SVIDRequest_Params.Merge(m, src)
}
func (m *AttestForX509SVIDRequest_Params) XXX_Size() int {
	return xxx_messageInfo_AttestForX509SVIDRequest_Params.Size(m)
}
func (m *AttestForX509SVIDRequest_Params) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestForX509SVIDRequest_Params.DiscardUnknown(m)
}

var xxx_messageInfo_AttestForX509SVIDRequest_Params proto.InternalMessageInfo

func (m *AttestForX509SVIDRequest_Params) GetData() *_type.AttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AttestForX509SVIDRequest_Params) GetParams() *X509SVIDParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type AttestForX509SVIDResponse struct {
	// Types that are valid to be assigned to Step:
	//	*AttestForX509SVIDResponse_Result_
	//	*AttestForX509SVIDResponse_Challenge
	Step                 isAttestForX509SVIDResponse_Step `protobuf_oneof:"step"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *AttestForX509SVIDResponse) Reset()         { *m = AttestForX509SVIDResponse{} }
func (m *AttestForX509SVIDResponse) String() string { return proto.CompactTextString(m) }
func (*AttestForX509SVIDResponse) ProtoMessage()    {}
func (*AttestForX509SVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8d83c9b614651f, []int{3}
}

func (m *AttestForX509SVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestForX509SVIDResponse.Unmarshal(m, b)
}
func (m *AttestForX509SVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestForX509SVIDResponse.Marshal(b, m, deterministic)
}
func (m *AttestForX509SVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestForX509SVIDResponse.Merge(m, src)
}
func (m *AttestForX509SVIDResponse) XXX_Size() int {
	return xxx_messageInfo_AttestForX509SVIDResponse.Size(m)
}
func (m *AttestForX509SVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestForX509SVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttestForX509SVIDResponse proto.InternalMessageInfo

type isAttestForX509SVIDResponse_Step interface {
	isAttestForX509SVIDResponse_Step()
}

type AttestForX509SVIDResponse_Result_ struct {
	Result *AttestForX509SVIDResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type AttestForX509SVIDResponse_Challenge struct {
	Challenge []byte `protobuf:"bytes,2,opt,name=challenge,proto3,oneof"`
}

func (*AttestForX509SVIDResponse_Result_) isAttestForX509SVIDResponse_Step() {}

func (*AttestForX509SVIDResponse_Challenge) isAttestForX509SVIDResponse_Step() {}

func (m *AttestForX509SVIDResponse) GetStep() isAttestForX509SVIDResponse_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (m *AttestForX509SVIDResponse) GetResult() *AttestForX509SVIDResponse_Result {
	if x, ok := m.GetStep().(*AttestForX509SVIDResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (m *AttestForX509SVIDResponse) GetChallenge() []byte {
	if x, ok := m.GetStep().(*AttestForX509SVIDResponse_Challenge); ok {
		return x.Challenge
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AttestForX509SVIDResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AttestForX509SVIDResponse_Result_)(nil),
		(*AttestForX509SVIDResponse_Challenge)(nil),
	}
}

type AttestForX509SVIDResponse_Result struct {
	CanonicalIdentity    *svid.X509SVID   `protobuf:"bytes,1,opt,name=canonical_identity,json=canonicalIdentity,proto3" json:"canonical_identity,omitempty"`
	AttributedIdentities []*svid.X509SVID `protobuf:"bytes,2,rep,name=attributed_identities,json=attributedIdentities,proto3" json:"attributed_identities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AttestForX509SVIDResponse_Result) Reset()         { *m = AttestForX509SVIDResponse_Result{} }
func (m *AttestForX509SVIDResponse_Result) String() string { return proto.CompactTextString(m) }
func (*AttestForX509SVIDResponse_Result) ProtoMessage()    {}
func (*AttestForX509SVIDResponse_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8d83c9b614651f, []int{3, 0}
}

func (m *AttestForX509SVIDResponse_Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestForX509SVIDResponse_Result.Unmarshal(m, b)
}
func (m *AttestForX509SVIDResponse_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestForX509SVIDResponse_Result.Marshal(b, m, deterministic)
}
func (m *AttestForX509SVIDResponse_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestForX509SVIDResponse_Result.Merge(m, src)
}
func (m *AttestForX509SVIDResponse_Result) XXX_Size() int {
	return xxx_messageInfo_AttestForX509SVIDResponse_Result.Size(m)
}
func (m *AttestForX509SVIDResponse_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestForX509SVIDResponse_Result.DiscardUnknown(m)
}

var xxx_messageInfo_AttestForX509SVIDResponse_Result proto.InternalMessageInfo

func (m *AttestForX509SVIDResponse_Result) GetCanonicalIdentity() *svid.X509SVID {
	if m != nil {
		return m.CanonicalIdentity
	}
	return nil
}

func (m *AttestForX509SVIDResponse_Result) GetAttributedIdentities() []*svid.X509SVID {
	if m != nil {
		return m.AttributedIdentities
	}
	return nil
}

type RenewX509SVIDRequest struct {
	// Types that are valid to be assigned to Step:
	//	*RenewX509SVIDRequest_Params
	//	*RenewX509SVIDRequest_Ack_
	Step                 isRenewX509SVIDRequest_Step `protobuf_oneof:"step"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *RenewX509SVIDRequest) Reset()         { *m = RenewX509SVIDRequest{} }
func (m *RenewX509SVIDRequest) String() string { return proto.CompactTextString(m) }
func (*RenewX509SVIDRequest) ProtoMessage()    {}
func (*RenewX509SVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8d83c9b614651f, []int{4}
}

func (m *RenewX509SVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenewX509SVIDRequest.Unmarshal(m, b)
}
func (m *RenewX509SVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenewX509SVIDRequest.Marshal(b, m, deterministic)
}
func (m *RenewX509SVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewX509SVIDRequest.Merge(m, src)
}
func (m *RenewX509SVIDRequest) XXX_Size() int {
	return xxx_messageInfo_RenewX509SVIDRequest.Size(m)
}
func (m *RenewX509SVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewX509SVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenewX509SVIDRequest proto.InternalMessageInfo

type isRenewX509SVIDRequest_Step interface {
	isRenewX509SVIDRequest_Step()
}

type RenewX509SVIDRequest_Params struct {
	Params *X509SVIDParams `protobuf:"bytes,1,opt,name=params,proto3,oneof"`
}

type RenewX509SVIDRequest_Ack_ struct {
	Ack *RenewX509SVIDRequest_Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

func (*RenewX509SVIDRequest_Params) isRenewX509SVIDRequest_Step() {}

func (*RenewX509SVIDRequest_Ack_) isRenewX509SVIDRequest_Step() {}

func (m *RenewX509SVIDRequest) GetStep() isRenewX509SVIDRequest_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (m *RenewX509SVIDRequest) GetParams() *X509SVIDParams {
	if x, ok := m.GetStep().(*RenewX509SVIDRequest_Params); ok {
		return x.Params
	}
	return nil
}

func (m *RenewX509SVIDRequest) GetAck() *RenewX509SVIDRequest_Ack {
	if x, ok := m.GetStep().(*RenewX509SVIDRequest_Ack_); ok {
		return x.Ack
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RenewX509SVIDRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RenewX509SVIDRequest_Params)(nil),
		(*RenewX509SVIDRequest_Ack_)(nil),
	}
}

type RenewX509SVIDRequest_Ack struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenewX509SVIDRequest_Ack) Reset()         { *m = RenewX509SVIDRequest_Ack{} }
func (m *RenewX509SVIDRequest_Ack) String() string { return proto.CompactTextString(m) }
func (*RenewX509SVIDRequest_Ack) ProtoMessage()    {}
func (*RenewX509SVIDRequest_Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8d83c9b614651f, []int{4, 0}
}

func (m *RenewX509SVIDRequest_Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenewX509SVIDRequest_Ack.Unmarshal(m, b)
}
func (m *RenewX509SVIDRequest_Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenewX509SVIDRequest_Ack.Marshal(b, m, deterministic)
}
func (m *RenewX509SVIDRequest_Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewX509SVIDRequest_Ack.Merge(m, src)
}
func (m *RenewX509SVIDRequest_Ack) XXX_Size() int {
	return xxx_messageInfo_RenewX509SVIDRequest_Ack.Size(m)
}
func (m *RenewX509SVIDRequest_Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewX509SVIDRequest_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_RenewX509SVIDRequest_Ack proto.InternalMessageInfo

type RenewX509SVIDResponse struct {
	Svid                 *svid.X509SVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RenewX509SVIDResponse) Reset()         { *m = RenewX509SVIDResponse{} }
func (m *RenewX509SVIDResponse) String() string { return proto.CompactTextString(m) }
func (*RenewX509SVIDResponse) ProtoMessage()    {}
func (*RenewX509SVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8d83c9b614651f, []int{5}
}

func (m *RenewX509SVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenewX509SVIDResponse.Unmarshal(m, b)
}
func (m *RenewX509SVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenewX509SVIDResponse.Marshal(b, m, deterministic)
}
func (m *RenewX509SVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewX509SVIDResponse.Merge(m, src)
}
func (m *RenewX509SVIDResponse) XXX_Size() int {
	return xxx_messageInfo_RenewX509SVIDResponse.Size(m)
}
func (m *RenewX509SVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewX509SVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RenewX509SVIDResponse proto.InternalMessageInfo

func (m *RenewX509SVIDResponse) GetSvid() *svid.X509SVID {
	if m != nil {
		return m.Svid
	}
	return nil
}

type NewX509SVIDRequest struct {
	EntryId              string          `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	Params               *X509SVIDParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NewX509SVIDRequest) Reset()         { *m = NewX509SVIDRequest{} }
func (m *NewX509SVIDRequest) String() string { return proto.CompactTextString(m) }
func (*NewX509SVIDRequest) ProtoMessage()    {}
func (*NewX509SVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8d83c9b614651f, []int{6}
}

func (m *NewX509SVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewX509SVIDRequest.Unmarshal(m, b)
}
func (m *NewX509SVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewX509SVIDRequest.Marshal(b, m, deterministic)
}
func (m *NewX509SVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewX509SVIDRequest.Merge(m, src)
}
func (m *NewX509SVIDRequest) XXX_Size() int {
	return xxx_messageInfo_NewX509SVIDRequest.Size(m)
}
func (m *NewX509SVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewX509SVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewX509SVIDRequest proto.InternalMessageInfo

func (m *NewX509SVIDRequest) GetEntryId() string {
	if m != nil {
		return m.EntryId
	}
	return ""
}

func (m *NewX509SVIDRequest) GetParams() *X509SVIDParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type NewX509SVIDResponse struct {
	Svid                 *svid.X509SVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NewX509SVIDResponse) Reset()         { *m = NewX509SVIDResponse{} }
func (m *NewX509SVIDResponse) String() string { return proto.CompactTextString(m) }
func (*NewX509SVIDResponse) ProtoMessage()    {}
func (*NewX509SVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8d83c9b614651f, []int{7}
}

func (m *NewX509SVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewX509SVIDResponse.Unmarshal(m, b)
}
func (m *NewX509SVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewX509SVIDResponse.Marshal(b, m, deterministic)
}
func (m *NewX509SVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewX509SVIDResponse.Merge(m, src)
}
func (m *NewX509SVIDResponse) XXX_Size() int {
	return xxx_messageInfo_NewX509SVIDResponse.Size(m)
}
func (m *NewX509SVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewX509SVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewX509SVIDResponse proto.InternalMessageInfo

func (m *NewX509SVIDResponse) GetSvid() *svid.X509SVID {
	if m != nil {
		return m.Svid
	}
	return nil
}

type NewJWTSVIDRequest struct {
	EntryId              string         `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	Params               *JWTSVIDParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NewJWTSVIDRequest) Reset()         { *m = NewJWTSVIDRequest{} }
func (m *NewJWTSVIDRequest) String() string { return proto.CompactTextString(m) }
func (*NewJWTSVIDRequest) ProtoMessage()    {}
func (*NewJWTSVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8d83c9b614651f, []int{8}
}

func (m *NewJWTSVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewJWTSVIDRequest.Unmarshal(m, b)
}
func (m *NewJWTSVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewJWTSVIDRequest.Marshal(b, m, deterministic)
}
func (m *NewJWTSVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewJWTSVIDRequest.Merge(m, src)
}
func (m *NewJWTSVIDRequest) XXX_Size() int {
	return xxx_messageInfo_NewJWTSVIDRequest.Size(m)
}
func (m *NewJWTSVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewJWTSVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewJWTSVIDRequest proto.InternalMessageInfo

func (m *NewJWTSVIDRequest) GetEntryId() string {
	if m != nil {
		return m.EntryId
	}
	return ""
}

func (m *NewJWTSVIDRequest) GetParams() *JWTSVIDParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type NewJWTSVIDResponse struct {
	Svid                 *svid.JWTSVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NewJWTSVIDResponse) Reset()         { *m = NewJWTSVIDResponse{} }
func (m *NewJWTSVIDResponse) String() string { return proto.CompactTextString(m) }
func (*NewJWTSVIDResponse) ProtoMessage()    {}
func (*NewJWTSVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8d83c9b614651f, []int{9}
}

func (m *NewJWTSVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewJWTSVIDResponse.Unmarshal(m, b)
}
func (m *NewJWTSVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewJWTSVIDResponse.Marshal(b, m, deterministic)
}
func (m *NewJWTSVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewJWTSVIDResponse.Merge(m, src)
}
func (m *NewJWTSVIDResponse) XXX_Size() int {
	return xxx_messageInfo_NewJWTSVIDResponse.Size(m)
}
func (m *NewJWTSVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewJWTSVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewJWTSVIDResponse proto.InternalMessageInfo

func (m *NewJWTSVIDResponse) GetSvid() *svid.JWTSVID {
	if m != nil {
		return m.Svid
	}
	return nil
}

type NewDownstreamX509CARequest struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewDownstreamX509CARequest) Reset()         { *m = NewDownstreamX509CARequest{} }
func (m *NewDownstreamX509CARequest) String() string { return proto.CompactTextString(m) }
func (*NewDownstreamX509CARequest) ProtoMessage()    {}
func (*NewDownstreamX509CARequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8d83c9b614651f, []int{10}
}

func (m *NewDownstreamX509CARequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewDownstreamX509CARequest.Unmarshal(m, b)
}
func (m *NewDownstreamX509CARequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewDownstreamX509CARequest.Marshal(b, m, deterministic)
}
func (m *NewDownstreamX509CARequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewDownstreamX509CARequest.Merge(m, src)
}
func (m *NewDownstreamX509CARequest) XXX_Size() int {
	return xxx_messageInfo_NewDownstreamX509CARequest.Size(m)
}
func (m *NewDownstreamX509CARequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewDownstreamX509CARequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewDownstreamX509CARequest proto.InternalMessageInfo

func (m *NewDownstreamX509CARequest) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type NewDownstreamX509CAResponse struct {
	// CA certificate and any intermediates part of the chain back to the root
	// (DER encoded). The CA certificate is the first.
	CaCertChain [][]byte `protobuf:"bytes,1,rep,name=ca_cert_chain,json=caCertChain,proto3" json:"ca_cert_chain,omitempty"`
	// Root CA certificates (DER encoded).
	RootCas              [][]byte `protobuf:"bytes,2,rep,name=root_cas,json=rootCas,proto3" json:"root_cas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewDownstreamX509CAResponse) Reset()         { *m = NewDownstreamX509CAResponse{} }
func (m *NewDownstreamX509CAResponse) String() string { return proto.CompactTextString(m) }
func (*NewDownstreamX509CAResponse) ProtoMessage()    {}
func (*NewDownstreamX509CAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8d83c9b614651f, []int{11}
}

func (m *NewDownstreamX509CAResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewDownstreamX509CAResponse.Unmarshal(m, b)
}
func (m *NewDownstreamX509CAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewDownstreamX509CAResponse.Marshal(b, m, deterministic)
}
func (m *NewDownstreamX509CAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewDownstreamX509CAResponse.Merge(m, src)
}
func (m *NewDownstreamX509CAResponse) XXX_Size() int {
	return xxx_messageInfo_NewDownstreamX509CAResponse.Size(m)
}
func (m *NewDownstreamX509CAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewDownstreamX509CAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewDownstreamX509CAResponse proto.InternalMessageInfo

func (m *NewDownstreamX509CAResponse) GetCaCertChain() [][]byte {
	if m != nil {
		return m.CaCertChain
	}
	return nil
}

func (m *NewDownstreamX509CAResponse) GetRootCas() [][]byte {
	if m != nil {
		return m.RootCas
	}
	return nil
}

func init() {
	proto.RegisterType((*X509SVIDParams)(nil), "spire.api.issuer.X509SVIDParams")
	proto.RegisterType((*JWTSVIDParams)(nil), "spire.api.issuer.JWTSVIDParams")
	proto.RegisterType((*AttestForX509SVIDRequest)(nil), "spire.api.issuer.AttestForX509SVIDRequest")
	proto.RegisterType((*AttestForX509SVIDRequest_Params)(nil), "spire.api.issuer.AttestForX509SVIDRequest.Params")
	proto.RegisterType((*AttestForX509SVIDResponse)(nil), "spire.api.issuer.AttestForX509SVIDResponse")
	proto.RegisterType((*AttestForX509SVIDResponse_Result)(nil), "spire.api.issuer.AttestForX509SVIDResponse.Result")
	proto.RegisterType((*RenewX509SVIDRequest)(nil), "spire.api.issuer.RenewX509SVIDRequest")
	proto.RegisterType((*RenewX509SVIDRequest_Ack)(nil), "spire.api.issuer.RenewX509SVIDRequest.Ack")
	proto.RegisterType((*RenewX509SVIDResponse)(nil), "spire.api.issuer.RenewX509SVIDResponse")
	proto.RegisterType((*NewX509SVIDRequest)(nil), "spire.api.issuer.NewX509SVIDRequest")
	proto.RegisterType((*NewX509SVIDResponse)(nil), "spire.api.issuer.NewX509SVIDResponse")
	proto.RegisterType((*NewJWTSVIDRequest)(nil), "spire.api.issuer.NewJWTSVIDRequest")
	proto.RegisterType((*NewJWTSVIDResponse)(nil), "spire.api.issuer.NewJWTSVIDResponse")
	proto.RegisterType((*NewDownstreamX509CARequest)(nil), "spire.api.issuer.NewDownstreamX509CARequest")
	proto.RegisterType((*NewDownstreamX509CAResponse)(nil), "spire.api.issuer.NewDownstreamX509CAResponse")
}

func init() { proto.RegisterFile("issuer.proto", fileDescriptor_8e8d83c9b614651f) }

var fileDescriptor_8e8d83c9b614651f = []byte{
	// 718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xff, 0x4e, 0x13, 0x41,
	0x10, 0xa6, 0x3f, 0x2c, 0x74, 0x28, 0xc6, 0xae, 0x90, 0x94, 0x43, 0x90, 0x9c, 0xa8, 0x84, 0x1f,
	0x57, 0xc4, 0x10, 0x45, 0x13, 0x93, 0xd2, 0x86, 0xb4, 0x62, 0x1a, 0x72, 0x1a, 0x31, 0xc6, 0xe4,
	0xb2, 0xdc, 0x6d, 0x60, 0x6d, 0xb9, 0x3b, 0x77, 0xb7, 0xd6, 0x3e, 0x82, 0x0f, 0xe0, 0x03, 0xe8,
	0x43, 0xf8, 0x7c, 0xe6, 0xf6, 0xb6, 0xd7, 0xf6, 0xae, 0xd0, 0xaa, 0xff, 0xf5, 0x76, 0xe6, 0x9b,
	0xf9, 0xe6, 0xdb, 0x6f, 0xa7, 0x50, 0xa0, 0x9c, 0x77, 0x08, 0x33, 0x7c, 0xe6, 0x09, 0x0f, 0xdd,
	0xe1, 0x3e, 0x65, 0xc4, 0xc0, 0x3e, 0x35, 0xc2, 0x73, 0xed, 0x9e, 0x3c, 0x29, 0x8b, 0x9e, 0x4f,
	0xca, 0x58, 0x08, 0xc2, 0x05, 0x16, 0xd4, 0x73, 0xc3, 0x7c, 0x6d, 0x6d, 0x28, 0xca, 0xbf, 0x52,
	0xa7, 0xfc, 0xed, 0x60, 0xef, 0x30, 0xf8, 0xa1, 0xe2, 0xab, 0xf1, 0xf8, 0xe7, 0xae, 0x18, 0x84,
	0xf5, 0x32, 0xdc, 0xfe, 0x70, 0xb0, 0x77, 0xf8, 0xf6, 0x7d, 0xa3, 0x76, 0x8a, 0x19, 0xbe, 0xe2,
	0x68, 0x15, 0xc0, 0xef, 0x9c, 0xb7, 0xa9, 0x6d, 0xb5, 0x48, 0xaf, 0x94, 0x5a, 0x4f, 0x6d, 0x16,
	0xcc, 0x7c, 0x78, 0x72, 0x42, 0x7a, 0xfa, 0x36, 0x2c, 0xbc, 0x3e, 0x7b, 0x37, 0x94, 0xaf, 0xc1,
	0x1c, 0xee, 0x38, 0x94, 0xb8, 0x36, 0x29, 0xa5, 0xd6, 0x33, 0x9b, 0x79, 0x33, 0xfa, 0xd6, 0x7f,
	0xa4, 0xa1, 0x54, 0x91, 0x94, 0x8f, 0x3d, 0xd6, 0xef, 0x63, 0x92, 0x2f, 0x1d, 0xc2, 0x05, 0x3a,
	0x81, 0x9c, 0x2f, 0x4b, 0xc8, 0x26, 0xf3, 0xfb, 0x4f, 0x8c, 0xf8, 0xe8, 0xc6, 0x75, 0x58, 0x23,
	0xec, 0x5d, 0x9f, 0x31, 0x55, 0x09, 0x54, 0x06, 0x64, 0x5f, 0xe2, 0x76, 0x9b, 0xb8, 0x17, 0xc4,
	0x62, 0x84, 0xfb, 0x9e, 0xcb, 0x49, 0x29, 0x1d, 0xb0, 0xaf, 0xcf, 0x98, 0xc5, 0x28, 0x66, 0xaa,
	0x90, 0xc6, 0x21, 0x77, 0xda, 0x87, 0x66, 0x1d, 0x2c, 0xb0, 0x62, 0xb1, 0xa2, 0x58, 0x04, 0x82,
	0xa9, 0xfe, 0x52, 0xee, 0x1a, 0x16, 0xd8, 0x94, 0x89, 0xe8, 0x79, 0x44, 0x3c, 0x2d, 0x21, 0xeb,
	0x49, 0xe2, 0xa3, 0x9a, 0xf6, 0x59, 0x1e, 0xe5, 0x20, 0xcb, 0x05, 0xf1, 0xf5, 0xdf, 0x69, 0x58,
	0x1e, 0x33, 0x5b, 0x48, 0x0d, 0xbd, 0x81, 0x1c, 0x23, 0xbc, 0xd3, 0x16, 0x8a, 0xd2, 0xfe, 0x54,
	0xc2, 0x84, 0x60, 0xc3, 0x94, 0xc8, 0x40, 0x99, 0xb0, 0x06, 0x5a, 0x83, 0x7c, 0x34, 0x7d, 0x24,
	0xc8, 0xe0, 0x48, 0xfb, 0x95, 0x82, 0x5c, 0x08, 0x42, 0x75, 0x40, 0x36, 0x76, 0x3d, 0x97, 0xda,
	0xb8, 0x6d, 0x51, 0x87, 0xb8, 0x82, 0x8a, 0x9e, 0x22, 0xb1, 0x3c, 0xac, 0x8b, 0x34, 0x50, 0xd4,
	0xba, 0x18, 0x81, 0x1a, 0x0a, 0x83, 0x9a, 0xb0, 0x84, 0x85, 0x60, 0xf4, 0xbc, 0x23, 0x88, 0xd3,
	0x2f, 0x45, 0x49, 0xa0, 0x58, 0xe6, 0xe6, 0x62, 0x8b, 0x03, 0x5c, 0x23, 0x82, 0x45, 0xc2, 0xfd,
	0x4c, 0xc1, 0xa2, 0x49, 0x5c, 0xd2, 0x8d, 0x9b, 0xe9, 0x45, 0xcc, 0x4c, 0x13, 0xef, 0x64, 0xc8,
	0x3b, 0xaf, 0x20, 0x83, 0xed, 0x96, 0xba, 0xcc, 0xad, 0x24, 0x70, 0x5c, 0x43, 0xa3, 0x62, 0xb7,
	0xea, 0x33, 0x66, 0x00, 0xd4, 0x6e, 0x41, 0xa6, 0x62, 0xb7, 0x22, 0x8e, 0xc7, 0xb0, 0x14, 0x43,
	0xa8, 0x7b, 0xdd, 0x85, 0x6c, 0x30, 0xeb, 0x64, 0x41, 0x65, 0x9a, 0x4e, 0x01, 0x35, 0x93, 0x83,
	0x2e, 0xc3, 0x1c, 0x71, 0x05, 0xeb, 0x59, 0xaa, 0x50, 0xde, 0x9c, 0x95, 0xdf, 0x0d, 0xe7, 0xdf,
	0x7d, 0xa9, 0xd7, 0xe0, 0x6e, 0xf3, 0xff, 0x09, 0x5f, 0x40, 0xb1, 0x49, 0xba, 0x6a, 0x3b, 0x4c,
	0xc1, 0xf7, 0x59, 0x8c, 0xef, 0xfd, 0x24, 0xdf, 0x91, 0x55, 0x13, 0xd1, 0x3d, 0x92, 0xca, 0x44,
	0x8d, 0x14, 0xdb, 0x9d, 0x11, 0xb6, 0xa5, 0x04, 0xdb, 0x7e, 0x7e, 0x48, 0xf6, 0x25, 0x68, 0x4d,
	0xd2, 0xad, 0x79, 0x5d, 0x97, 0x0b, 0x46, 0xf0, 0x55, 0x30, 0x4b, 0xb5, 0xd2, 0x67, 0x3d, 0x61,
	0x09, 0x7e, 0x82, 0x95, 0xb1, 0x60, 0xc5, 0x44, 0x87, 0x05, 0x1b, 0x5b, 0x36, 0x61, 0xc2, 0xb2,
	0x2f, 0x31, 0x75, 0xe5, 0x5e, 0x2c, 0x98, 0xf3, 0x36, 0xae, 0x12, 0x26, 0xaa, 0xc1, 0x51, 0xa0,
	0x0b, 0xf3, 0x3c, 0x61, 0xd9, 0x38, 0x7c, 0x14, 0x05, 0x73, 0x36, 0xf8, 0xae, 0x62, 0xbe, 0xff,
	0x3d, 0x0b, 0xb9, 0x86, 0x9c, 0x1f, 0xf9, 0x50, 0x4c, 0x3c, 0x75, 0xb4, 0x35, 0xfd, 0xa2, 0xd4,
	0xb6, 0xff, 0x62, 0x77, 0x6c, 0xa6, 0xf6, 0x52, 0xc8, 0x81, 0x85, 0x11, 0xf7, 0xa2, 0x47, 0xd3,
	0x3d, 0x08, 0xed, 0xf1, 0xc4, 0xbc, 0xa1, 0x2e, 0x1f, 0x61, 0x7e, 0xc8, 0x70, 0x68, 0x23, 0x89,
	0x4d, 0x5a, 0x5f, 0x7b, 0x38, 0x21, 0x4b, 0xa9, 0x7f, 0x06, 0x30, 0x70, 0x07, 0x7a, 0x30, 0x16,
	0x34, 0x6a, 0x52, 0x6d, 0xe3, 0xe6, 0x24, 0x55, 0x98, 0xc9, 0x57, 0x12, 0xbf, 0x75, 0xb4, 0x33,
	0x16, 0x7c, 0x8d, 0xb3, 0xb4, 0xdd, 0x29, 0xb3, 0xc3, 0x9e, 0xe7, 0x39, 0xf9, 0x37, 0xfd, 0xf4,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xed, 0xc0, 0x3a, 0x25, 0x25, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IssuerClient is the client API for Issuer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IssuerClient interface {
	// AttestX509SVID attests the caller using node attestation. The result of
	// attestation is either a canonical identity or one or more attributed
	// identities. Canonical identies can be renewed via the RenewX509SVID() call.
	// Attributed identities cannot be renewed directly and can only be
	// refreshed through another call to AttestForX509SVID().
	//
	// Authorized callers:
	// - anybody
	AttestForX509SVID(ctx context.Context, opts ...grpc.CallOption) (Issuer_AttestForX509SVIDClient, error)
	// RenewX509SVID renews a previously issued canonical X509-SVID on behalf
	// of a node. It is streaming to facilitate two-phase commit of the renewed
	// SVID issuance.
	//
	// Authorized callers:
	// - canonical identities
	RenewX509SVID(ctx context.Context, opts ...grpc.CallOption) (Issuer_RenewX509SVIDClient, error)
	// NewX509SVID creates new X509-SVID
	//
	// Authorized callers:
	// - delegatee of the the workload entry (direct or otherwise)
	NewX509SVID(ctx context.Context, in *NewX509SVIDRequest, opts ...grpc.CallOption) (*NewX509SVIDResponse, error)
	// NewJWTSVID creates a JWT-SVID
	//
	// Authorized callers:
	// - delegatee of the the workload entry (direct or otherwise)
	NewJWTSVID(ctx context.Context, in *NewJWTSVIDRequest, opts ...grpc.CallOption) (*NewJWTSVIDResponse, error)
	// NewDownstreamX509CA creates an X509 CA appropriate for use by a
	// downstream entity to mint X509-SVIDs.
	//
	// Authorized callers:
	// - downstream identities
	NewDownstreamX509CA(ctx context.Context, in *NewDownstreamX509CARequest, opts ...grpc.CallOption) (*NewDownstreamX509CAResponse, error)
}

type issuerClient struct {
	cc *grpc.ClientConn
}

func NewIssuerClient(cc *grpc.ClientConn) IssuerClient {
	return &issuerClient{cc}
}

func (c *issuerClient) AttestForX509SVID(ctx context.Context, opts ...grpc.CallOption) (Issuer_AttestForX509SVIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Issuer_serviceDesc.Streams[0], "/spire.api.issuer.Issuer/AttestForX509SVID", opts...)
	if err != nil {
		return nil, err
	}
	x := &issuerAttestForX509SVIDClient{stream}
	return x, nil
}

type Issuer_AttestForX509SVIDClient interface {
	Send(*AttestForX509SVIDRequest) error
	Recv() (*AttestForX509SVIDResponse, error)
	grpc.ClientStream
}

type issuerAttestForX509SVIDClient struct {
	grpc.ClientStream
}

func (x *issuerAttestForX509SVIDClient) Send(m *AttestForX509SVIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *issuerAttestForX509SVIDClient) Recv() (*AttestForX509SVIDResponse, error) {
	m := new(AttestForX509SVIDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *issuerClient) RenewX509SVID(ctx context.Context, opts ...grpc.CallOption) (Issuer_RenewX509SVIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Issuer_serviceDesc.Streams[1], "/spire.api.issuer.Issuer/RenewX509SVID", opts...)
	if err != nil {
		return nil, err
	}
	x := &issuerRenewX509SVIDClient{stream}
	return x, nil
}

type Issuer_RenewX509SVIDClient interface {
	Send(*RenewX509SVIDRequest) error
	Recv() (*RenewX509SVIDResponse, error)
	grpc.ClientStream
}

type issuerRenewX509SVIDClient struct {
	grpc.ClientStream
}

func (x *issuerRenewX509SVIDClient) Send(m *RenewX509SVIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *issuerRenewX509SVIDClient) Recv() (*RenewX509SVIDResponse, error) {
	m := new(RenewX509SVIDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *issuerClient) NewX509SVID(ctx context.Context, in *NewX509SVIDRequest, opts ...grpc.CallOption) (*NewX509SVIDResponse, error) {
	out := new(NewX509SVIDResponse)
	err := c.cc.Invoke(ctx, "/spire.api.issuer.Issuer/NewX509SVID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerClient) NewJWTSVID(ctx context.Context, in *NewJWTSVIDRequest, opts ...grpc.CallOption) (*NewJWTSVIDResponse, error) {
	out := new(NewJWTSVIDResponse)
	err := c.cc.Invoke(ctx, "/spire.api.issuer.Issuer/NewJWTSVID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerClient) NewDownstreamX509CA(ctx context.Context, in *NewDownstreamX509CARequest, opts ...grpc.CallOption) (*NewDownstreamX509CAResponse, error) {
	out := new(NewDownstreamX509CAResponse)
	err := c.cc.Invoke(ctx, "/spire.api.issuer.Issuer/NewDownstreamX509CA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuerServer is the server API for Issuer service.
type IssuerServer interface {
	// AttestX509SVID attests the caller using node attestation. The result of
	// attestation is either a canonical identity or one or more attributed
	// identities. Canonical identies can be renewed via the RenewX509SVID() call.
	// Attributed identities cannot be renewed directly and can only be
	// refreshed through another call to AttestForX509SVID().
	//
	// Authorized callers:
	// - anybody
	AttestForX509SVID(Issuer_AttestForX509SVIDServer) error
	// RenewX509SVID renews a previously issued canonical X509-SVID on behalf
	// of a node. It is streaming to facilitate two-phase commit of the renewed
	// SVID issuance.
	//
	// Authorized callers:
	// - canonical identities
	RenewX509SVID(Issuer_RenewX509SVIDServer) error
	// NewX509SVID creates new X509-SVID
	//
	// Authorized callers:
	// - delegatee of the the workload entry (direct or otherwise)
	NewX509SVID(context.Context, *NewX509SVIDRequest) (*NewX509SVIDResponse, error)
	// NewJWTSVID creates a JWT-SVID
	//
	// Authorized callers:
	// - delegatee of the the workload entry (direct or otherwise)
	NewJWTSVID(context.Context, *NewJWTSVIDRequest) (*NewJWTSVIDResponse, error)
	// NewDownstreamX509CA creates an X509 CA appropriate for use by a
	// downstream entity to mint X509-SVIDs.
	//
	// Authorized callers:
	// - downstream identities
	NewDownstreamX509CA(context.Context, *NewDownstreamX509CARequest) (*NewDownstreamX509CAResponse, error)
}

// UnimplementedIssuerServer can be embedded to have forward compatible implementations.
type UnimplementedIssuerServer struct {
}

func (*UnimplementedIssuerServer) AttestForX509SVID(srv Issuer_AttestForX509SVIDServer) error {
	return status.Errorf(codes.Unimplemented, "method AttestForX509SVID not implemented")
}
func (*UnimplementedIssuerServer) RenewX509SVID(srv Issuer_RenewX509SVIDServer) error {
	return status.Errorf(codes.Unimplemented, "method RenewX509SVID not implemented")
}
func (*UnimplementedIssuerServer) NewX509SVID(ctx context.Context, req *NewX509SVIDRequest) (*NewX509SVIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewX509SVID not implemented")
}
func (*UnimplementedIssuerServer) NewJWTSVID(ctx context.Context, req *NewJWTSVIDRequest) (*NewJWTSVIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewJWTSVID not implemented")
}
func (*UnimplementedIssuerServer) NewDownstreamX509CA(ctx context.Context, req *NewDownstreamX509CARequest) (*NewDownstreamX509CAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDownstreamX509CA not implemented")
}

func RegisterIssuerServer(s *grpc.Server, srv IssuerServer) {
	s.RegisterService(&_Issuer_serviceDesc, srv)
}

func _Issuer_AttestForX509SVID_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IssuerServer).AttestForX509SVID(&issuerAttestForX509SVIDServer{stream})
}

type Issuer_AttestForX509SVIDServer interface {
	Send(*AttestForX509SVIDResponse) error
	Recv() (*AttestForX509SVIDRequest, error)
	grpc.ServerStream
}

type issuerAttestForX509SVIDServer struct {
	grpc.ServerStream
}

func (x *issuerAttestForX509SVIDServer) Send(m *AttestForX509SVIDResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *issuerAttestForX509SVIDServer) Recv() (*AttestForX509SVIDRequest, error) {
	m := new(AttestForX509SVIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Issuer_RenewX509SVID_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IssuerServer).RenewX509SVID(&issuerRenewX509SVIDServer{stream})
}

type Issuer_RenewX509SVIDServer interface {
	Send(*RenewX509SVIDResponse) error
	Recv() (*RenewX509SVIDRequest, error)
	grpc.ServerStream
}

type issuerRenewX509SVIDServer struct {
	grpc.ServerStream
}

func (x *issuerRenewX509SVIDServer) Send(m *RenewX509SVIDResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *issuerRenewX509SVIDServer) Recv() (*RenewX509SVIDRequest, error) {
	m := new(RenewX509SVIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Issuer_NewX509SVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewX509SVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServer).NewX509SVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.issuer.Issuer/NewX509SVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServer).NewX509SVID(ctx, req.(*NewX509SVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issuer_NewJWTSVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewJWTSVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServer).NewJWTSVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.issuer.Issuer/NewJWTSVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServer).NewJWTSVID(ctx, req.(*NewJWTSVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issuer_NewDownstreamX509CA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDownstreamX509CARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServer).NewDownstreamX509CA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.issuer.Issuer/NewDownstreamX509CA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServer).NewDownstreamX509CA(ctx, req.(*NewDownstreamX509CARequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Issuer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.api.issuer.Issuer",
	HandlerType: (*IssuerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewX509SVID",
			Handler:    _Issuer_NewX509SVID_Handler,
		},
		{
			MethodName: "NewJWTSVID",
			Handler:    _Issuer_NewJWTSVID_Handler,
		},
		{
			MethodName: "NewDownstreamX509CA",
			Handler:    _Issuer_NewDownstreamX509CA_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AttestForX509SVID",
			Handler:       _Issuer_AttestForX509SVID_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RenewX509SVID",
			Handler:       _Issuer_RenewX509SVID_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "issuer.proto",
}
